= Arquillian Spacelift

Arquillian process and package manager. Makes executing an external process or fetching platform depends dependencies an easier job.

== Making it part of your extension

In your project, import following artifact:

[source,xml]
----
<dependency>
    <groupId>org.arquillian.spacelift</groupId>
    <artifactId>arquillian-spacelift</artifactId>
    <version>${version.arquillian.spacelift}</version>
</dependency>
----

In your extension, inject instance of +ProcessExecutor+. This instance is created in +ArquillianDescriptor+ event and you can observe
+ProcessExecutorCreated+ event if you will. The instance is singleton, so you will always retrieve the same instance.

[source,java]
----
@Instance<ProcessExecutor> processExecutor;
----

== How to use the extension

=== ProcessExecutor

ProcessExecutor allows your extension to execute any code, either external or internal. You have following possibilities:

Execution::
    Use +execute(...)+ method if you want to execute a command and wait for it to be finished
Spawning::
    Use +spawn(...)+ method if you want to execute a command as a daemon in different thread
One time action::
    Use +submit(...)+ method if you want to asynchronously execute a code block
Periodical action::
    Use +scheduleUntilTrue(...)+ method if you want to re-execute code block until condition is fulfilled

=== ProcessInteraction

ProcessInteraction defines how a command scheduled for execution input and output is handled. You have +ProcessInteractionBuilder+ convenience builder
available:

Input handling::
	Use +replyTo(String)+ and +with(String)+ or +with(Answer)+ to define non-interactive handling of process input.
	Process output, split into separate lines is matched against pattern provided by +replyTo(String)+. Answer can either
	be a string to be typed or you can force process termination by using +TerminateAnswer+
Output/error printing::
	Use +output(String)+ or +errors(String)+ to define pattern that if matched against output line, are printed either to 
	standard output or standard error output
Process name::
	By default, a process output is prefixed by process name, defined by first parameter of +Command+. Use +prefix(String)+ 
	call to override this prefix. You can also set it to +null+ or empty string if you want process output to be indistinguishable
	from other output

=== ProcessExecutor in your test(s)

You can inject +ProcessExecutor+ into test as an +ArquillianResource+ like this:

[source, java]
----
@ArquillianResource ProcessExecutor executor;
----

After this, you can use process executor in your test methods in order to perform platform specific operations. You are free to inject 
this resource into test method itself as well.

== TODO

Currently missing features:

* support to get platform dependent bits automatically
* provide metadata format to simplify platform dependent execution

== Releasing new version

In order to release new version, execute following Maven command:

[source,bash]
----
mvn clean release:prepare release:perform
----

Then:

1. Verify the build from staging repository
2. Make sure all JIRAs are closed
3. Release version in JIRA and create next version if not available
4. Promote the build to the stable Maven repository
5. Push commits and tag created by +maven-release-plugin+ to the repository.
